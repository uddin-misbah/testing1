main:
    params: [args]

    steps:
    - init: 
        assign:
        - project: ${args.project}
        - zone: ${args.zone}
        - machineType: ${args.machinetype}
        - instanceName: ${args.instance}
        - serviceAccount: ${args.serviceaccount}
        - role_id: ${args.role_id}
        - role_title: ${args.user_role_title}
       
#### Create a VM (short version, granular config details can be pulled from VM console REST equivalent feature)       
        
    - create_machine:
        call: googleapis.compute.v1.instances.insert
        args:
          project: ${project}
          zone: ${zone}
          body:
            name: ${instanceName}
            machineType: ${"zones/" + zone + "/machineTypes/" + machineType}
            disks:
            - initializeParams:
                sourceImage: "projects/debian-cloud/global/images/debian-10-buster-v20201112"
              boot: true
              autoDelete: true
            networkInterfaces:
            - network: "global/networks/default"
            
### Pulled from workflow connectors demo github repo (https://github.com/GoogleCloudPlatform/workflows-demos/blob/master/connector-compute/create-stop-vm-connector.yaml)            
### Calls another job below which calls an api "googleapis.compute.v1.instances.get"   

    - assert_running:
        call: assert_machine_status
        args:
          expected_status: "RUNNING"
          project: ${project}
          zone: ${zone}
          instanceName: ${instanceName}
          
### Creates a custom Role using API  and global parameters        
          
    - RoleCreate:
            call: http.post
            args:
              url: '${"https://iam.googleapis.com/v1/projects/"+project+"/roles"}'
              auth:
                type: OAuth2
              body: {
                "roleId": "${role_id}",
                "role": {
                    "title": "${role_title}",
                    "description": "cloud sql full access but no delete db",
                    "stage": "GA",
                    "includedPermissions": "cloudsql.backupRuns.create"
                }
              }
            result: result
            
### References CloudBuildCreate job below calling an API to spin up Cloud Build container with gcloud sdk pre-installed
### Executes gcloud command to add iam policy binding to a service account
### Substitutions is integrated to make use of global parameters. A format is required to be followed when setting substitutions
    
    - buildCreate_add_role:
        call: CloudBuildCreate
        args: 
          project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          build: 
            steps:
                - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
                  args:
                    - "-c"
                    - "gcloud projects add-iam-policy-binding ${_PROJECT_NAME} --member=${_SERVICE_ACCOUNT} --role=projects/${_PROJECT_NAME}/roles/${_ROLE_ID}"
                  entrypoint: "/bin/sh"
            substitutions:
               _PROJECT_NAME: ${project}
               _ROLE_ID: ${role_id}
               _SERVICE_ACCOUNT: ${serviceAccount}
  
        result: build
        
    - waitBuildAddRole:
        call: CloudBuildWaitOperation
        args:
          operation: ${build.name}
        result: build


### Workflow sleeps for 5 minutes

    - someSleep:
        call: sys.sleep
        args:
          seconds: 300

### Making use of Cloud Build again to remove iam policy binding using gcloud 

    - buildCreate_remove_role:
        call: CloudBuildCreate
        args: 
          project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          build: 
            steps:
                - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
                  args:
                    - "-c"
                    - "gcloud projects remove-iam-policy-binding ${_PROJECT_NAME} --member=${_SERVICE_ACCOUNT} --role=projects/${_PROJECT_NAME}/roles/${_ROLE_ID}"
                  entrypoint: "/bin/sh"
            substitutions:
               _PROJECT_NAME: ${project}
               _ROLE_ID: ${role_id}
               _SERVICE_ACCOUNT: ${serviceAccount}
  
        result: build

    - waitBuildRemoveRole:
        call: CloudBuildWaitOperation
        args:
          operation: ${build.name}
        result: build
        
### Delete custom role        
    - RoleDelete:
            call: http.delete
            args:
              url: ${"https://iam.googleapis.com/v1/projects/"+project+"/roles/"+role_id}
              auth:
                type: OAuth2
        
        
### Calling the API to delete VM using global parameters        

    - delete_VM:
        call: googleapis.compute.v1.instances.delete
        args:
          project: ${project}
          instance: ${instanceName}
          zone: ${zone}
        result: delete_VM_result
    - last:
        return: ${delete_VM_result}


assert_machine_status:
    params: [expected_status, project, zone, instanceName]
    steps:
    - get_instance:
        call: googleapis.compute.v1.instances.get
        args:
          instance: ${instanceName}
          project: ${project}
          zone: ${zone}
        result: instance

CloudBuildCreate:
  params: [project, build]
  steps:
    - buildCreate:
        try: 
          call: http.post
          args:
            url: ${"https://cloudbuild.googleapis.com/v1/projects/"+project+"/builds"}
            auth:
              type: OAuth2
            body: ${build}
          result: result
        except:
          as: e
          steps:
            - UnhandledException:
                raise: ${e}
        next: documentFound
    - documentFound:
        return: ${result.body}
    
CloudBuildWaitOperation:
  params: [operation]
  steps:
    - init:
        assign:
          - i: 0
          - result: 
              a: b
    - check_condition:
        switch:
          - condition: ${not("done" in result) AND i<100}
            next: iterate
        next: exit_loop
    - iterate:
        steps:
          - sleep:
              call: sys.sleep
              args:
                seconds: 10
          - process_item:
              call: http.get
              args:
                url: ${"https://cloudbuild.googleapis.com/v1/"+operation}
                auth:
                  type: OAuth2
              result: result
          - assign_loop:
              assign:
                - i: ${i+1}
                - result: ${result.body} 
        next: check_condition
    - exit_loop:
        return: ${result}

